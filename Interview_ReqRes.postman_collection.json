{
	"info": {
		"_postman_id": "51e5520c-d5b8-4fd6-84bc-cbe3d29e3159",
		"name": "Interview_ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11140925"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.jsonBody('name');\r",
							"    pm.response.to.have.jsonBody('job');\r",
							"    pm.response.to.have.jsonBody('id');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ogulcan firat\",\r\n    \"job\": \"qa engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/users",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "List a Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Data object has the required fields\", function () {\r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    //pm.expect(responseData.data).to.include.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');\r",
							"\r",
							"    pm.expect(responseData.data.id).to.exist;\r",
							"    pm.expect(responseData.data.email).to.exist;\r",
							"    pm.expect(responseData.data.first_name).to.exist;\r",
							"    pm.expect(responseData.data.last_name).to.exist;\r",
							"    pm.expect(responseData.data.avatar ).to.exist;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Support object has 'url' and 'text' fields\", function () {\r",
							"    pm.expect(responseData.support).to.be.an('object');\r",
							"    pm.expect(responseData.support).to.have.property('url');\r",
							"    pm.expect(responseData.support).to.have.property('text');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \r",
							"    \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct User Check\", function () {\r",
							"    const userID = pm.environment.get(\"user_id\")\r",
							"    pm.expect(responseData.data.id).to.eql(userID);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomValue = Math.floor(Math.random() * 12) + 1;\r",
							"\r",
							"// pm.environment.set(\"user_id\", randomValue);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/users/{{user_id}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": [
				{
					"name": "List a Single User",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/api/users/{{user_id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 16 Mar 2025 18:12:18 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1742024898&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=IJR4mn4x2OGE1XQy%2BQB0hfgS7B8vKD1f5gSoyJ5Y1GU%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1742024898&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=IJR4mn4x2OGE1XQy%2BQB0hfgS7B8vKD1f5gSoyJ5Y1GU%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"152-ApQgGHL6RKwaebFlrPCYPBO1xHg\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "3109"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "921637d0b83ddd60-IST"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "server-timing",
							"value": "cfL4;desc=\"?proto=TCP&rtt=11476&min_rtt=11268&rtt_var=3307&sent=16&recv=16&lost=0&retrans=0&sent_bytes=4681&recv_bytes=824&delivery_rate=384567&cwnd=254&unsent_bytes=0&cid=6c3f6110ab480661&ts=10152&x=0\""
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\",\n        \"text\": \"Tired of writing endless social media content? Let Content Caddy generate it for you.\"\n    }\n}"
				}
			]
		},
		{
			"name": "List Multiple Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"// pm.test(\"Correct Page Count\", function () {    \r",
							"//     pm.expect(jsonData.page).to.eql(2);\r",
							"// });\r",
							"// pm.test(\"Correct Per Page Count\", function () {\r",
							"//     pm.expect(jsonData.per_page).to.eql(6);\r",
							"// });\r",
							"// pm.test(\"Total Entry Count\", function () {\r",
							"//     pm.expect(jsonData.total).to.eql(12);\r",
							"// });\r",
							"// pm.test(\"Total Pages Count\", function () {\r",
							"//     pm.expect(jsonData.total_pages).to.eql(2);\r",
							"// });\r",
							"\r",
							"pm.test(\"Correct Json Response\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"    // pm.expect(jsonData.total).to.eql(12);\r",
							"    // pm.expect(jsonData.total_pages).to.eql(1);\r",
							"    pm.expect(jsonData.data[0].id).to.eql(7);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if an user with the first name 'George' exists\", function(){\r",
							"    const data = jsonData.data;\r",
							"    let georgeExist = false;\r",
							"\r",
							"    for(let i = 0; i < data.length; i++)\r",
							"    {\r",
							"        if(data[i].first_name === \"George\")\r",
							"        {\r",
							"            georgeExist = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.expect(georgeExist).to.be.true;\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/users?page=2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ogulcan\",\r\n    \"job\": \"firat\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/users/2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/users/2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/users/23",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users",
						"23"
					],
					"query": [
						{
							"key": "x-api-key",
							"value": "reqres-free-v1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"let resourceName = jsonData.data[1].name;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"resourceName\", resourceName);\r",
							"\r",
							"pm.test(\"Correct Json Response\", function(){\r",
							"    pm.expect(jsonData.page).to.eql(1);\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"    pm.expect(jsonData.total).to.eql(12);\r",
							"    pm.expect(jsonData.total_pages).to.eql(2);\r",
							"    pm.expect(jsonData.data[0].id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if a color exists\", function(){\r",
							"    const data = jsonData.data;\r",
							"    let ceruleanExist = false;\r",
							"\r",
							"    for(let i = 0; i < data.length; i++)\r",
							"    {\r",
							"        if(data[i].name === \"cerulean\")\r",
							"        {\r",
							"            ceruleanExist = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.expect(ceruleanExist).to.be.true;\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/unknown",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Single Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resourceName = pm.environment.get(\"resourceName\");\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Color Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.name).to.eql(resourceName);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/unknown/2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Resource Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/api/unknown/23",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					],
					"query": [
						{
							"key": "x-api-key",
							"value": "reqres-free-v1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ogulcan\",\r\n    \"job\": \"firat\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/users/2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Successful Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/register",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuccessful Register - Missing Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful Login - Missing Password\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(pm.response.json().error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/register",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuccessful Register - Missing Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful Registration - Missing Email\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.expect(pm.response.json().error).to.eql(\"Missing email or username\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "{{base-url}}/api/register",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Successful Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/login",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuccessful Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/api/login",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users - Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://reqres.in/api/users?delay=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 1 second\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});"
				]
			}
		}
	]
}